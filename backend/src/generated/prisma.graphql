# source: https://us1.prisma.sh/daniel-chapman-a5ce0d/stock-game/dev
# timestamp: Wed Feb 05 2020 17:09:39 GMT-0500 (Eastern Standard Time)

type AggregateRandomProfile {
  count: Int!
}

type AggregateRandomProfileStockOrder {
  count: Int!
}

type AggregateStock {
  count: Int!
}

type AggregateStockOrder {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createStock(data: StockCreateInput!): Stock!
  createUser(data: UserCreateInput!): User!
  createRandomProfile(data: RandomProfileCreateInput!): RandomProfile!
  createStockOrder(data: StockOrderCreateInput!): StockOrder!
  createRandomProfileStockOrder(data: RandomProfileStockOrderCreateInput!): RandomProfileStockOrder!
  updateStock(data: StockUpdateInput!, where: StockWhereUniqueInput!): Stock
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateRandomProfile(data: RandomProfileUpdateInput!, where: RandomProfileWhereUniqueInput!): RandomProfile
  updateStockOrder(data: StockOrderUpdateInput!, where: StockOrderWhereUniqueInput!): StockOrder
  updateRandomProfileStockOrder(data: RandomProfileStockOrderUpdateInput!, where: RandomProfileStockOrderWhereUniqueInput!): RandomProfileStockOrder
  deleteStock(where: StockWhereUniqueInput!): Stock
  deleteUser(where: UserWhereUniqueInput!): User
  deleteRandomProfile(where: RandomProfileWhereUniqueInput!): RandomProfile
  deleteStockOrder(where: StockOrderWhereUniqueInput!): StockOrder
  deleteRandomProfileStockOrder(where: RandomProfileStockOrderWhereUniqueInput!): RandomProfileStockOrder
  upsertStock(where: StockWhereUniqueInput!, create: StockCreateInput!, update: StockUpdateInput!): Stock!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertRandomProfile(where: RandomProfileWhereUniqueInput!, create: RandomProfileCreateInput!, update: RandomProfileUpdateInput!): RandomProfile!
  upsertStockOrder(where: StockOrderWhereUniqueInput!, create: StockOrderCreateInput!, update: StockOrderUpdateInput!): StockOrder!
  upsertRandomProfileStockOrder(where: RandomProfileStockOrderWhereUniqueInput!, create: RandomProfileStockOrderCreateInput!, update: RandomProfileStockOrderUpdateInput!): RandomProfileStockOrder!
  updateManyStocks(data: StockUpdateManyMutationInput!, where: StockWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyRandomProfiles(data: RandomProfileUpdateManyMutationInput!, where: RandomProfileWhereInput): BatchPayload!
  updateManyStockOrders(data: StockOrderUpdateManyMutationInput!, where: StockOrderWhereInput): BatchPayload!
  updateManyRandomProfileStockOrders(data: RandomProfileStockOrderUpdateManyMutationInput!, where: RandomProfileStockOrderWhereInput): BatchPayload!
  deleteManyStocks(where: StockWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyRandomProfiles(where: RandomProfileWhereInput): BatchPayload!
  deleteManyStockOrders(where: StockOrderWhereInput): BatchPayload!
  deleteManyRandomProfileStockOrders(where: RandomProfileStockOrderWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  STOCKCREATE
  STOCKUPDATE
  STOCKDELETE
  RANDOMPROFILEMANAGE
  PERMISSIONUPDATE
}

type Query {
  stocks(where: StockWhereInput, orderBy: StockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stock]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  randomProfiles(where: RandomProfileWhereInput, orderBy: RandomProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RandomProfile]!
  stockOrders(where: StockOrderWhereInput, orderBy: StockOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StockOrder]!
  randomProfileStockOrders(where: RandomProfileStockOrderWhereInput, orderBy: RandomProfileStockOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RandomProfileStockOrder]!
  stock(where: StockWhereUniqueInput!): Stock
  user(where: UserWhereUniqueInput!): User
  randomProfile(where: RandomProfileWhereUniqueInput!): RandomProfile
  stockOrder(where: StockOrderWhereUniqueInput!): StockOrder
  randomProfileStockOrder(where: RandomProfileStockOrderWhereUniqueInput!): RandomProfileStockOrder
  stocksConnection(where: StockWhereInput, orderBy: StockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StockConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  randomProfilesConnection(where: RandomProfileWhereInput, orderBy: RandomProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RandomProfileConnection!
  stockOrdersConnection(where: StockOrderWhereInput, orderBy: StockOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StockOrderConnection!
  randomProfileStockOrdersConnection(where: RandomProfileStockOrderWhereInput, orderBy: RandomProfileStockOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RandomProfileStockOrderConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type RandomProfile implements Node {
  id: ID!
  name: String!
  money: Float
  stocks(where: RandomProfileStockOrderWhereInput, orderBy: RandomProfileStockOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RandomProfileStockOrder!]
}

"""A connection to a list of items."""
type RandomProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RandomProfileEdge]!
  aggregate: AggregateRandomProfile!
}

input RandomProfileCreateInput {
  id: ID
  name: String!
  money: Float
  stocks: RandomProfileStockOrderCreateManyWithoutProfileInput
}

input RandomProfileCreateOneWithoutStocksInput {
  create: RandomProfileCreateWithoutStocksInput
  connect: RandomProfileWhereUniqueInput
}

input RandomProfileCreateWithoutStocksInput {
  id: ID
  name: String!
  money: Float
}

"""An edge in a connection."""
type RandomProfileEdge {
  """The item at the end of the edge."""
  node: RandomProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RandomProfileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  money_ASC
  money_DESC
}

type RandomProfilePreviousValues {
  id: ID!
  name: String!
  money: Float
}

type RandomProfileStockOrder implements Node {
  id: ID!
  symbol: String!
  profile: RandomProfile!
  quantity: Float!
  purchasedAt: Float!
}

"""A connection to a list of items."""
type RandomProfileStockOrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RandomProfileStockOrderEdge]!
  aggregate: AggregateRandomProfileStockOrder!
}

input RandomProfileStockOrderCreateInput {
  id: ID
  symbol: String!
  quantity: Float
  purchasedAt: Float!
  profile: RandomProfileCreateOneWithoutStocksInput!
}

input RandomProfileStockOrderCreateManyWithoutProfileInput {
  create: [RandomProfileStockOrderCreateWithoutProfileInput!]
  connect: [RandomProfileStockOrderWhereUniqueInput!]
}

input RandomProfileStockOrderCreateWithoutProfileInput {
  id: ID
  symbol: String!
  quantity: Float
  purchasedAt: Float!
}

"""An edge in a connection."""
type RandomProfileStockOrderEdge {
  """The item at the end of the edge."""
  node: RandomProfileStockOrder!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RandomProfileStockOrderOrderByInput {
  id_ASC
  id_DESC
  symbol_ASC
  symbol_DESC
  quantity_ASC
  quantity_DESC
  purchasedAt_ASC
  purchasedAt_DESC
}

type RandomProfileStockOrderPreviousValues {
  id: ID!
  symbol: String!
  quantity: Float!
  purchasedAt: Float!
}

input RandomProfileStockOrderScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RandomProfileStockOrderScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RandomProfileStockOrderScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RandomProfileStockOrderScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  symbol: String

  """All values that are not equal to given value."""
  symbol_not: String

  """All values that are contained in given list."""
  symbol_in: [String!]

  """All values that are not contained in given list."""
  symbol_not_in: [String!]

  """All values less than the given value."""
  symbol_lt: String

  """All values less than or equal the given value."""
  symbol_lte: String

  """All values greater than the given value."""
  symbol_gt: String

  """All values greater than or equal the given value."""
  symbol_gte: String

  """All values containing the given string."""
  symbol_contains: String

  """All values not containing the given string."""
  symbol_not_contains: String

  """All values starting with the given string."""
  symbol_starts_with: String

  """All values not starting with the given string."""
  symbol_not_starts_with: String

  """All values ending with the given string."""
  symbol_ends_with: String

  """All values not ending with the given string."""
  symbol_not_ends_with: String
  quantity: Float

  """All values that are not equal to given value."""
  quantity_not: Float

  """All values that are contained in given list."""
  quantity_in: [Float!]

  """All values that are not contained in given list."""
  quantity_not_in: [Float!]

  """All values less than the given value."""
  quantity_lt: Float

  """All values less than or equal the given value."""
  quantity_lte: Float

  """All values greater than the given value."""
  quantity_gt: Float

  """All values greater than or equal the given value."""
  quantity_gte: Float
  purchasedAt: Float

  """All values that are not equal to given value."""
  purchasedAt_not: Float

  """All values that are contained in given list."""
  purchasedAt_in: [Float!]

  """All values that are not contained in given list."""
  purchasedAt_not_in: [Float!]

  """All values less than the given value."""
  purchasedAt_lt: Float

  """All values less than or equal the given value."""
  purchasedAt_lte: Float

  """All values greater than the given value."""
  purchasedAt_gt: Float

  """All values greater than or equal the given value."""
  purchasedAt_gte: Float
}

type RandomProfileStockOrderSubscriptionPayload {
  mutation: MutationType!
  node: RandomProfileStockOrder
  updatedFields: [String!]
  previousValues: RandomProfileStockOrderPreviousValues
}

input RandomProfileStockOrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RandomProfileStockOrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RandomProfileStockOrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RandomProfileStockOrderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RandomProfileStockOrderWhereInput
}

input RandomProfileStockOrderUpdateInput {
  symbol: String
  quantity: Float
  purchasedAt: Float
  profile: RandomProfileUpdateOneRequiredWithoutStocksInput
}

input RandomProfileStockOrderUpdateManyDataInput {
  symbol: String
  quantity: Float
  purchasedAt: Float
}

input RandomProfileStockOrderUpdateManyMutationInput {
  symbol: String
  quantity: Float
  purchasedAt: Float
}

input RandomProfileStockOrderUpdateManyWithoutProfileInput {
  create: [RandomProfileStockOrderCreateWithoutProfileInput!]
  connect: [RandomProfileStockOrderWhereUniqueInput!]
  set: [RandomProfileStockOrderWhereUniqueInput!]
  disconnect: [RandomProfileStockOrderWhereUniqueInput!]
  delete: [RandomProfileStockOrderWhereUniqueInput!]
  update: [RandomProfileStockOrderUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [RandomProfileStockOrderUpdateManyWithWhereNestedInput!]
  deleteMany: [RandomProfileStockOrderScalarWhereInput!]
  upsert: [RandomProfileStockOrderUpsertWithWhereUniqueWithoutProfileInput!]
}

input RandomProfileStockOrderUpdateManyWithWhereNestedInput {
  where: RandomProfileStockOrderScalarWhereInput!
  data: RandomProfileStockOrderUpdateManyDataInput!
}

input RandomProfileStockOrderUpdateWithoutProfileDataInput {
  symbol: String
  quantity: Float
  purchasedAt: Float
}

input RandomProfileStockOrderUpdateWithWhereUniqueWithoutProfileInput {
  where: RandomProfileStockOrderWhereUniqueInput!
  data: RandomProfileStockOrderUpdateWithoutProfileDataInput!
}

input RandomProfileStockOrderUpsertWithWhereUniqueWithoutProfileInput {
  where: RandomProfileStockOrderWhereUniqueInput!
  update: RandomProfileStockOrderUpdateWithoutProfileDataInput!
  create: RandomProfileStockOrderCreateWithoutProfileInput!
}

input RandomProfileStockOrderWhereInput {
  """Logical AND on all given filters."""
  AND: [RandomProfileStockOrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [RandomProfileStockOrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RandomProfileStockOrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  symbol: String

  """All values that are not equal to given value."""
  symbol_not: String

  """All values that are contained in given list."""
  symbol_in: [String!]

  """All values that are not contained in given list."""
  symbol_not_in: [String!]

  """All values less than the given value."""
  symbol_lt: String

  """All values less than or equal the given value."""
  symbol_lte: String

  """All values greater than the given value."""
  symbol_gt: String

  """All values greater than or equal the given value."""
  symbol_gte: String

  """All values containing the given string."""
  symbol_contains: String

  """All values not containing the given string."""
  symbol_not_contains: String

  """All values starting with the given string."""
  symbol_starts_with: String

  """All values not starting with the given string."""
  symbol_not_starts_with: String

  """All values ending with the given string."""
  symbol_ends_with: String

  """All values not ending with the given string."""
  symbol_not_ends_with: String
  quantity: Float

  """All values that are not equal to given value."""
  quantity_not: Float

  """All values that are contained in given list."""
  quantity_in: [Float!]

  """All values that are not contained in given list."""
  quantity_not_in: [Float!]

  """All values less than the given value."""
  quantity_lt: Float

  """All values less than or equal the given value."""
  quantity_lte: Float

  """All values greater than the given value."""
  quantity_gt: Float

  """All values greater than or equal the given value."""
  quantity_gte: Float
  purchasedAt: Float

  """All values that are not equal to given value."""
  purchasedAt_not: Float

  """All values that are contained in given list."""
  purchasedAt_in: [Float!]

  """All values that are not contained in given list."""
  purchasedAt_not_in: [Float!]

  """All values less than the given value."""
  purchasedAt_lt: Float

  """All values less than or equal the given value."""
  purchasedAt_lte: Float

  """All values greater than the given value."""
  purchasedAt_gt: Float

  """All values greater than or equal the given value."""
  purchasedAt_gte: Float
  profile: RandomProfileWhereInput
}

input RandomProfileStockOrderWhereUniqueInput {
  id: ID
}

type RandomProfileSubscriptionPayload {
  mutation: MutationType!
  node: RandomProfile
  updatedFields: [String!]
  previousValues: RandomProfilePreviousValues
}

input RandomProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RandomProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RandomProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RandomProfileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RandomProfileWhereInput
}

input RandomProfileUpdateInput {
  name: String
  money: Float
  stocks: RandomProfileStockOrderUpdateManyWithoutProfileInput
}

input RandomProfileUpdateManyMutationInput {
  name: String
  money: Float
}

input RandomProfileUpdateOneRequiredWithoutStocksInput {
  create: RandomProfileCreateWithoutStocksInput
  connect: RandomProfileWhereUniqueInput
  update: RandomProfileUpdateWithoutStocksDataInput
  upsert: RandomProfileUpsertWithoutStocksInput
}

input RandomProfileUpdateWithoutStocksDataInput {
  name: String
  money: Float
}

input RandomProfileUpsertWithoutStocksInput {
  update: RandomProfileUpdateWithoutStocksDataInput!
  create: RandomProfileCreateWithoutStocksInput!
}

input RandomProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [RandomProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [RandomProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RandomProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  money: Float

  """All values that are not equal to given value."""
  money_not: Float

  """All values that are contained in given list."""
  money_in: [Float!]

  """All values that are not contained in given list."""
  money_not_in: [Float!]

  """All values less than the given value."""
  money_lt: Float

  """All values less than or equal the given value."""
  money_lte: Float

  """All values greater than the given value."""
  money_gt: Float

  """All values greater than or equal the given value."""
  money_gte: Float
  stocks_every: RandomProfileStockOrderWhereInput
  stocks_some: RandomProfileStockOrderWhereInput
  stocks_none: RandomProfileStockOrderWhereInput
}

input RandomProfileWhereUniqueInput {
  id: ID
}

type Stock implements Node {
  id: ID!
  name: String!
  symbol: String!
  grouping: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type StockConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StockEdge]!
  aggregate: AggregateStock!
}

input StockCreateInput {
  id: ID
  name: String!
  symbol: String!
  grouping: Float!
}

"""An edge in a connection."""
type StockEdge {
  """The item at the end of the edge."""
  node: Stock!

  """A cursor for use in pagination."""
  cursor: String!
}

type StockOrder implements Node {
  id: ID!
  symbol: String!
  user: User!
  quantity: Float!
  purchasedAt: Float!
}

enum StockOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  symbol_ASC
  symbol_DESC
  grouping_ASC
  grouping_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""A connection to a list of items."""
type StockOrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StockOrderEdge]!
  aggregate: AggregateStockOrder!
}

input StockOrderCreateInput {
  id: ID
  symbol: String!
  quantity: Float
  purchasedAt: Float!
  user: UserCreateOneWithoutStocksInput!
}

input StockOrderCreateManyWithoutUserInput {
  create: [StockOrderCreateWithoutUserInput!]
  connect: [StockOrderWhereUniqueInput!]
}

input StockOrderCreateWithoutUserInput {
  id: ID
  symbol: String!
  quantity: Float
  purchasedAt: Float!
}

"""An edge in a connection."""
type StockOrderEdge {
  """The item at the end of the edge."""
  node: StockOrder!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StockOrderOrderByInput {
  id_ASC
  id_DESC
  symbol_ASC
  symbol_DESC
  quantity_ASC
  quantity_DESC
  purchasedAt_ASC
  purchasedAt_DESC
}

type StockOrderPreviousValues {
  id: ID!
  symbol: String!
  quantity: Float!
  purchasedAt: Float!
}

input StockOrderScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StockOrderScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockOrderScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockOrderScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  symbol: String

  """All values that are not equal to given value."""
  symbol_not: String

  """All values that are contained in given list."""
  symbol_in: [String!]

  """All values that are not contained in given list."""
  symbol_not_in: [String!]

  """All values less than the given value."""
  symbol_lt: String

  """All values less than or equal the given value."""
  symbol_lte: String

  """All values greater than the given value."""
  symbol_gt: String

  """All values greater than or equal the given value."""
  symbol_gte: String

  """All values containing the given string."""
  symbol_contains: String

  """All values not containing the given string."""
  symbol_not_contains: String

  """All values starting with the given string."""
  symbol_starts_with: String

  """All values not starting with the given string."""
  symbol_not_starts_with: String

  """All values ending with the given string."""
  symbol_ends_with: String

  """All values not ending with the given string."""
  symbol_not_ends_with: String
  quantity: Float

  """All values that are not equal to given value."""
  quantity_not: Float

  """All values that are contained in given list."""
  quantity_in: [Float!]

  """All values that are not contained in given list."""
  quantity_not_in: [Float!]

  """All values less than the given value."""
  quantity_lt: Float

  """All values less than or equal the given value."""
  quantity_lte: Float

  """All values greater than the given value."""
  quantity_gt: Float

  """All values greater than or equal the given value."""
  quantity_gte: Float
  purchasedAt: Float

  """All values that are not equal to given value."""
  purchasedAt_not: Float

  """All values that are contained in given list."""
  purchasedAt_in: [Float!]

  """All values that are not contained in given list."""
  purchasedAt_not_in: [Float!]

  """All values less than the given value."""
  purchasedAt_lt: Float

  """All values less than or equal the given value."""
  purchasedAt_lte: Float

  """All values greater than the given value."""
  purchasedAt_gt: Float

  """All values greater than or equal the given value."""
  purchasedAt_gte: Float
}

type StockOrderSubscriptionPayload {
  mutation: MutationType!
  node: StockOrder
  updatedFields: [String!]
  previousValues: StockOrderPreviousValues
}

input StockOrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StockOrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockOrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockOrderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StockOrderWhereInput
}

input StockOrderUpdateInput {
  symbol: String
  quantity: Float
  purchasedAt: Float
  user: UserUpdateOneRequiredWithoutStocksInput
}

input StockOrderUpdateManyDataInput {
  symbol: String
  quantity: Float
  purchasedAt: Float
}

input StockOrderUpdateManyMutationInput {
  symbol: String
  quantity: Float
  purchasedAt: Float
}

input StockOrderUpdateManyWithoutUserInput {
  create: [StockOrderCreateWithoutUserInput!]
  connect: [StockOrderWhereUniqueInput!]
  set: [StockOrderWhereUniqueInput!]
  disconnect: [StockOrderWhereUniqueInput!]
  delete: [StockOrderWhereUniqueInput!]
  update: [StockOrderUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [StockOrderUpdateManyWithWhereNestedInput!]
  deleteMany: [StockOrderScalarWhereInput!]
  upsert: [StockOrderUpsertWithWhereUniqueWithoutUserInput!]
}

input StockOrderUpdateManyWithWhereNestedInput {
  where: StockOrderScalarWhereInput!
  data: StockOrderUpdateManyDataInput!
}

input StockOrderUpdateWithoutUserDataInput {
  symbol: String
  quantity: Float
  purchasedAt: Float
}

input StockOrderUpdateWithWhereUniqueWithoutUserInput {
  where: StockOrderWhereUniqueInput!
  data: StockOrderUpdateWithoutUserDataInput!
}

input StockOrderUpsertWithWhereUniqueWithoutUserInput {
  where: StockOrderWhereUniqueInput!
  update: StockOrderUpdateWithoutUserDataInput!
  create: StockOrderCreateWithoutUserInput!
}

input StockOrderWhereInput {
  """Logical AND on all given filters."""
  AND: [StockOrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockOrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockOrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  symbol: String

  """All values that are not equal to given value."""
  symbol_not: String

  """All values that are contained in given list."""
  symbol_in: [String!]

  """All values that are not contained in given list."""
  symbol_not_in: [String!]

  """All values less than the given value."""
  symbol_lt: String

  """All values less than or equal the given value."""
  symbol_lte: String

  """All values greater than the given value."""
  symbol_gt: String

  """All values greater than or equal the given value."""
  symbol_gte: String

  """All values containing the given string."""
  symbol_contains: String

  """All values not containing the given string."""
  symbol_not_contains: String

  """All values starting with the given string."""
  symbol_starts_with: String

  """All values not starting with the given string."""
  symbol_not_starts_with: String

  """All values ending with the given string."""
  symbol_ends_with: String

  """All values not ending with the given string."""
  symbol_not_ends_with: String
  quantity: Float

  """All values that are not equal to given value."""
  quantity_not: Float

  """All values that are contained in given list."""
  quantity_in: [Float!]

  """All values that are not contained in given list."""
  quantity_not_in: [Float!]

  """All values less than the given value."""
  quantity_lt: Float

  """All values less than or equal the given value."""
  quantity_lte: Float

  """All values greater than the given value."""
  quantity_gt: Float

  """All values greater than or equal the given value."""
  quantity_gte: Float
  purchasedAt: Float

  """All values that are not equal to given value."""
  purchasedAt_not: Float

  """All values that are contained in given list."""
  purchasedAt_in: [Float!]

  """All values that are not contained in given list."""
  purchasedAt_not_in: [Float!]

  """All values less than the given value."""
  purchasedAt_lt: Float

  """All values less than or equal the given value."""
  purchasedAt_lte: Float

  """All values greater than the given value."""
  purchasedAt_gt: Float

  """All values greater than or equal the given value."""
  purchasedAt_gte: Float
  user: UserWhereInput
}

input StockOrderWhereUniqueInput {
  id: ID
}

type StockPreviousValues {
  id: ID!
  name: String!
  symbol: String!
  grouping: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StockSubscriptionPayload {
  mutation: MutationType!
  node: Stock
  updatedFields: [String!]
  previousValues: StockPreviousValues
}

input StockSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StockSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StockWhereInput
}

input StockUpdateInput {
  name: String
  symbol: String
  grouping: Float
}

input StockUpdateManyMutationInput {
  name: String
  symbol: String
  grouping: Float
}

input StockWhereInput {
  """Logical AND on all given filters."""
  AND: [StockWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  symbol: String

  """All values that are not equal to given value."""
  symbol_not: String

  """All values that are contained in given list."""
  symbol_in: [String!]

  """All values that are not contained in given list."""
  symbol_not_in: [String!]

  """All values less than the given value."""
  symbol_lt: String

  """All values less than or equal the given value."""
  symbol_lte: String

  """All values greater than the given value."""
  symbol_gt: String

  """All values greater than or equal the given value."""
  symbol_gte: String

  """All values containing the given string."""
  symbol_contains: String

  """All values not containing the given string."""
  symbol_not_contains: String

  """All values starting with the given string."""
  symbol_starts_with: String

  """All values not starting with the given string."""
  symbol_not_starts_with: String

  """All values ending with the given string."""
  symbol_ends_with: String

  """All values not ending with the given string."""
  symbol_not_ends_with: String
  grouping: Float

  """All values that are not equal to given value."""
  grouping_not: Float

  """All values that are contained in given list."""
  grouping_in: [Float!]

  """All values that are not contained in given list."""
  grouping_not_in: [Float!]

  """All values less than the given value."""
  grouping_lt: Float

  """All values less than or equal the given value."""
  grouping_lte: Float

  """All values greater than the given value."""
  grouping_gt: Float

  """All values greater than or equal the given value."""
  grouping_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input StockWhereUniqueInput {
  id: ID
  name: String
  symbol: String
}

type Subscription {
  stock(where: StockSubscriptionWhereInput): StockSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  randomProfile(where: RandomProfileSubscriptionWhereInput): RandomProfileSubscriptionPayload
  stockOrder(where: StockOrderSubscriptionWhereInput): StockOrderSubscriptionPayload
  randomProfileStockOrder(where: RandomProfileStockOrderSubscriptionWhereInput): RandomProfileStockOrderSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  money: Float
  apikey: String
  stocks(where: StockOrderWhereInput, orderBy: StockOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StockOrder!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  money: Float
  apikey: String
  permissions: UserCreatepermissionsInput
  stocks: StockOrderCreateManyWithoutUserInput
}

input UserCreateOneWithoutStocksInput {
  create: UserCreateWithoutStocksInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutStocksInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  money: Float
  apikey: String
  permissions: UserCreatepermissionsInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  money_ASC
  money_DESC
  apikey_ASC
  apikey_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  money: Float
  apikey: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  money: Float
  apikey: String
  permissions: UserUpdatepermissionsInput
  stocks: StockOrderUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  money: Float
  apikey: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredWithoutStocksInput {
  create: UserCreateWithoutStocksInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutStocksDataInput
  upsert: UserUpsertWithoutStocksInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutStocksDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  money: Float
  apikey: String
  permissions: UserUpdatepermissionsInput
}

input UserUpsertWithoutStocksInput {
  update: UserUpdateWithoutStocksDataInput!
  create: UserCreateWithoutStocksInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  money: Float

  """All values that are not equal to given value."""
  money_not: Float

  """All values that are contained in given list."""
  money_in: [Float!]

  """All values that are not contained in given list."""
  money_not_in: [Float!]

  """All values less than the given value."""
  money_lt: Float

  """All values less than or equal the given value."""
  money_lte: Float

  """All values greater than the given value."""
  money_gt: Float

  """All values greater than or equal the given value."""
  money_gte: Float
  apikey: String

  """All values that are not equal to given value."""
  apikey_not: String

  """All values that are contained in given list."""
  apikey_in: [String!]

  """All values that are not contained in given list."""
  apikey_not_in: [String!]

  """All values less than the given value."""
  apikey_lt: String

  """All values less than or equal the given value."""
  apikey_lte: String

  """All values greater than the given value."""
  apikey_gt: String

  """All values greater than or equal the given value."""
  apikey_gte: String

  """All values containing the given string."""
  apikey_contains: String

  """All values not containing the given string."""
  apikey_not_contains: String

  """All values starting with the given string."""
  apikey_starts_with: String

  """All values not starting with the given string."""
  apikey_not_starts_with: String

  """All values ending with the given string."""
  apikey_ends_with: String

  """All values not ending with the given string."""
  apikey_not_ends_with: String
  stocks_every: StockOrderWhereInput
  stocks_some: StockOrderWhereInput
  stocks_none: StockOrderWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
